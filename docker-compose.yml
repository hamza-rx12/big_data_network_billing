version: '3.8'

services:

  # Zookeeper for managing configs
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my_net


  # Kafka for messaging
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - my_net


  # Kafka-ui to see what's going on
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - my_net


  # Producer to generate record streams
  producer:
    build:
      context: ./producer
    container_name: producer
    depends_on:
      - kafka
      - database
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - my_net


  # Flink job manager exposes a port where we can see our jobs
  jobmanager:
    image: confluentinc/cp-flink:1.18.1-cp3-java17-amd64
    command: jobmanager
    container_name: flink-jobman
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    ports:
      - "8081:8081"
    networks:
      - my_net


  # Flink task manager does the work
  taskmanager:
    image: confluentinc/cp-flink:1.18.1-cp3-java17-amd64
    command: taskmanager
    container_name: flink-taskman
    depends_on:
      - jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - my_net
  

  # Flink consumer to process the streams 
  consumer:
    build:
      context: ./consumer
    container_name: consumer
    depends_on:
      - kafka
      - producer
      - jobmanager
      - taskmanager
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - my_net


  # A database where to stock our data
  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    networks:
      - my_net


  # Our springboot backend that manages the database
  database:
    build: ./database/springboot_api
    image: springboot_api
    container_name: springboot_api
    depends_on:
      - mongo
    ports:
      - "8080:8080"
    networks:
      - my_net


  # Spark Master where we publish our processes
  spark-master:
    build:
      context: ./batch_processor
      dockerfile: spark.Dockerfile
    image: spark-master-image
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IP=spark-master
    ports:
      - "8083:8080"  # Spark UI
      - "7077:7077"  # Spark Master port
    networks:
      - my_net


  # Spark Worker who does the job
  spark-worker:
    build:
      context: ./batch_processor
      dockerfile: spark.Dockerfile
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=4
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IP=spark-worker
    depends_on:
      - spark-master
    networks:
      - my_net


  # Minio our object storage where we save our customer invoices 
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - my_net


networks:
  my_net:
    driver: bridge
